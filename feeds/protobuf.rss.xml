<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Sullivan. Jeremy Sullivan. : Posts tagged 'protobuf'</title>
  <description>Sullivan. Jeremy Sullivan. : Posts tagged 'protobuf'</description>
  <link>https://subtle-supernova.github.io/tags/protobuf.html</link>
  <lastBuildDate>Sun, 14 Jan 2018 21:37:34 UT</lastBuildDate>
  <pubDate>Sun, 14 Jan 2018 21:37:34 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Adventures in NIM FFI</title>
   <link>https://subtle-supernova.github.io/blog/2018/01/14/adventures-in-nim-ffi?utm_source=protobuf&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:https-subtle-supernova-github-io:-blog-2018-01-14-adventures-in-nim-ffi</guid>
   <pubDate>Sun, 14 Jan 2018 21:37:34 UT</pubDate>
   <author>Jeremy Sullivan </author>
   <description>
&lt;p&gt;I&amp;rsquo;ve recently dipped a toe into the &lt;a href="https://nim-lang.org/"&gt;nim&lt;/a&gt; programming language. The things that interest me the most are the fact that it compiles to C and FFI with C++. I&amp;rsquo;ve been interested in FFI with C++ lately because &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt; is pretty wonderful to use but its language support is sort of limited. One language that&amp;rsquo;s really well supported, however, is C++. While not apposed to writing C++, I think if there is an alternative, you should seek it out.&lt;/p&gt;

&lt;p&gt;I decided to first experiment with embedding nim into C++ rather than calling C++ from nim. This is definitely the less documented approach, so I would recommend it. But here are some of my findings.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="the-nim-code"&gt;The nim code&lt;/h3&gt;

&lt;div class="brush: nim"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proc &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cint&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;cint&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;exportc&lt;/span&gt;&lt;span class="p"&gt;.}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The nim comes straight from the FFI docs. It&amp;rsquo;s pretty strait forward aside from a couple of notes: - &lt;code&gt;cint&lt;/code&gt; is a built in type. No imports. - &lt;code&gt;{. [...] .}&lt;/code&gt; is the compiler directive syntax. &lt;code&gt;{. exportc .}&lt;/code&gt; means not to mangle the name.&lt;/p&gt;

&lt;p&gt;Compiling this gets a little bit tricky.&lt;/p&gt;

&lt;div class="brush: bash"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;nim cpp --noMain --noLinking --header:fib.h fib.nim
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;First note that we call &lt;code&gt;nim cpp&lt;/code&gt;. I have to admit that I spent some time calling &lt;code&gt;nim c&lt;/code&gt; which I thought stood for &lt;code&gt;nim compile&lt;/code&gt; as the &lt;code&gt;nim&lt;/code&gt; command actually does a lot (like just generating C code instead of a binary, for example). What that actually means is compile &lt;em&gt;with&lt;/em&gt; C. When linking to C++ this is obvioulsy not what we want, but the issues that arise don&amp;rsquo;t exaclty point strait to that solution. Next, the &lt;code&gt;--noMain&lt;/code&gt; just means we don&amp;rsquo;t want an entry point. The &lt;code&gt;--noLinking&lt;/code&gt; means don&amp;rsquo;t call the linker, we&amp;rsquo;ll do that later and lastly &lt;code&gt;--header:fib.h&lt;/code&gt; is the name of the header we&amp;rsquo;re generating while &lt;code&gt;fib.nim&lt;/code&gt; is our file we want to compile.&lt;/p&gt;

&lt;h3 id="the-c-code"&gt;The C++ code&lt;/h3&gt;

&lt;p&gt;I decided to try and embed nim into the &lt;a href="https://github.com/grpc/grpc/tree/master/examples/cpp"&gt;gRPC c++ example&lt;/a&gt;.  That didn&amp;rsquo;t actually turn out to matter at all except for making linking tricky, so I&amp;rsquo;ll share my findings here anyway.&lt;/p&gt;

&lt;div class="brush: c++"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"fib.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ... gRPC example imports ...&lt;/span&gt;

&lt;span class="c1"&gt;// ... server handler impl ...&lt;/span&gt;
&lt;span class="c1"&gt;// ... runServer function ...&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;NimMain&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fib of %d is %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="n"&gt;RunServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So we have to run &lt;code&gt;NimMain();&lt;/code&gt; to start us off. We&amp;rsquo;ll get to where this comes from later, but as for what it does is mainly start the garbage collector. After that, we&amp;rsquo;re ready to start calling anything defined in &lt;code&gt;fib.h&lt;/code&gt;. There&amp;rsquo;s no more magic here, the rest of it comes from linking so let&amp;rsquo;s  take a look.&lt;/p&gt;

&lt;h3 id="the-makefileld"&gt;The Makefile/LD&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll be the first to admit that I&amp;rsquo;m no Make guru. I use them almost daily, but for very simple tasks, and not usually for compiling c/c++. So here&amp;rsquo;s my gnarly makefile.&lt;/p&gt;

&lt;div class="brush: Make"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CXX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; clang++
&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; clang
&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;pkg-config --cflags protobuf grpc&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -Inimcache -I/usr/local/nim/lib
&lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -Inimcache -I/usr/local/nim/lib -std&lt;span class="o"&gt;=&lt;/span&gt;c++11

&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -L/usr/local/lib &lt;span class="sb"&gt;`&lt;/span&gt;pkg-config --libs protobuf grpc++ grpc&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
                     -Lnimcache&lt;span class="se"&gt;\&lt;/span&gt;
                     -v -lgrpc++_reflection&lt;span class="se"&gt;\&lt;/span&gt;
                     -ldl

&lt;span class="nv"&gt;GRPC_CPP_PLUGIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; grpc_cpp_plugin
&lt;span class="nv"&gt;GRPC_CPP_PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;which &lt;span class="k"&gt;$(&lt;/span&gt;GRPC_CPP_PLUGIN&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nv"&gt;PROTOC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; protoc
&lt;span class="nv"&gt;PROTOS_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ./protos

&lt;span class="cp"&gt;vpath %.proto $(PROTOS_PATH)&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;greeter_server&lt;/span&gt; &lt;span class="n"&gt;greeter_client&lt;/span&gt;

&lt;span class="nf"&gt;greeter_server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;.&lt;span class="n"&gt;pb&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;.&lt;span class="n"&gt;grpc&lt;/span&gt;.&lt;span class="n"&gt;pb&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;greeter_server&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;nimcache&lt;/span&gt;/*.&lt;span class="n"&gt;o&lt;/span&gt; 
    &lt;span class="k"&gt;$(&lt;/span&gt;CXX&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CXXFLAGS&lt;span class="k"&gt;)&lt;/span&gt; $^ &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="nf"&gt;greeter_client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;.&lt;span class="n"&gt;pb&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;.&lt;span class="n"&gt;grpc&lt;/span&gt;.&lt;span class="n"&gt;pb&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;greeter_client&lt;/span&gt;.&lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CXX&lt;span class="k"&gt;)&lt;/span&gt; $^ &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; 

&lt;span class="nf"&gt;nimcache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nimcache&lt;/span&gt;/*.&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -c $^ &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;nim&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    nim cpp --noMain --noLinking --header:fib.h fib.nim

&lt;span class="nf"&gt;.PRECIOUS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;grpc&lt;/span&gt;.&lt;span class="n"&gt;pb&lt;/span&gt;.&lt;span class="n"&gt;cc&lt;/span&gt;
&lt;span class="nf"&gt;%.grpc.pb.cc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;proto&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PROTOC&lt;span class="k"&gt;)&lt;/span&gt; -I &lt;span class="k"&gt;$(&lt;/span&gt;PROTOS_PATH&lt;span class="k"&gt;)&lt;/span&gt; --grpc_out&lt;span class="o"&gt;=&lt;/span&gt;. --plugin&lt;span class="o"&gt;=&lt;/span&gt;protoc-gen-grpc&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GRPC_CPP_PLUGIN_PATH&lt;span class="k"&gt;)&lt;/span&gt; $&amp;lt;

&lt;span class="nf"&gt;.PRECIOUS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;pb&lt;/span&gt;.&lt;span class="n"&gt;cc&lt;/span&gt;
&lt;span class="nf"&gt;%.pb.cc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;proto&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PROTOC&lt;span class="k"&gt;)&lt;/span&gt; -I &lt;span class="k"&gt;$(&lt;/span&gt;PROTOS_PATH&lt;span class="k"&gt;)&lt;/span&gt; --cpp_out&lt;span class="o"&gt;=&lt;/span&gt;. $&amp;lt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -f *.o *.pb.cc *.pb.h greeter_server greeter_client
    rm -rf nimcache
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;My strategy here was to call &lt;code&gt;make nim&lt;/code&gt;, &lt;code&gt;make nimcache&lt;/code&gt; and then &lt;code&gt;make&lt;/code&gt;.  That made it easy for me to check what was happening between tasks, so I never extended &lt;code&gt;all&lt;/code&gt; to include building of nim files.  Most of this is taken from the gRPC C++ example makefile, which handles passing &lt;code&gt;.proto&lt;/code&gt; files to &lt;code&gt;protoc&lt;/code&gt; really well, so no reason to change that.  There&amp;rsquo;s only a few changes we need to make to the file aside from targets.  The first thing we need to add is &lt;code&gt;nimcache/*.o&lt;/code&gt; to &lt;code&gt;greeter_server&lt;/code&gt; so that &lt;code&gt;$^&lt;/code&gt; picks up the object files placed there by &lt;code&gt;make nimcache&lt;/code&gt;.  The final change is extending our flags to make sure the &lt;code&gt;nimcache&lt;/code&gt; directory is included and we link to nim.&lt;/p&gt;

&lt;p&gt;And viola, running &lt;code&gt;greeter_server&lt;/code&gt; both runs the &lt;code&gt;fib()&lt;/code&gt; call and starts a gRPC server!&lt;/p&gt;

&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This has certainly been a fun adventure. I definitely think nim has a solid place in the world. I&amp;rsquo;m not even sure it&amp;rsquo;s that niche, to be honest. There&amp;rsquo;s a lot of C code out there that can&amp;rsquo;t just be turned into a python module. There&amp;rsquo;s also a lot of python code out there that could stand  to have some non performant loops put into C. Nim enables all of those things without any C expertise or memory management and not just with python, but any dynamic language. I&amp;rsquo;m also really impressed with the tooling given how young the language is. Editor support has been pretty great and the &lt;code&gt;nimble&lt;/code&gt; package manager is well on its way to getting the job done.&lt;/p&gt;</description></item></channel></rss>