((3) 0 () 2 ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-08-02-markdown-to-html-to-pdf-my-resume-s-journey.md" . unix) (p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-07-20-hello-world.md" . unix)) () (h ! (equal) ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-07-20-hello-world.md" . unix) f post (u . "Hello world") (? . 1) 1515963992 (p+ #"/home/ubuntu/subtle-supernova.github.io/blog/2016/07/20/hello-world/index.html" . unix) (u . "/blog/2016/07/20/hello-world") (u . "2016-07-20T20:53:54") #f (? . 0) (c (u . "hello") c (u . "lisp") c (u . "jekyll") c (u . "ocaml") c (u . "crygen") c (u . "clojure") c (u . "stog") c (u . "frog")) (u . "\n<h1 id=\"hello-world\">Hello, world!</h1>\n\n<p>Static content generators have been sort of a fad lately. I&rsquo;ve used them in the past to generate all sorts of  documentation and marketing pages for various jobs. In those days, I&rsquo;d always use <a href=\"https://jekyllrb.com/\">Jekyll</a> or  more recently, <a href=\"http://cryogenweb.org/\">Cryogen</a>. Jekyll always had a huge community behind it which made finding  themes or plugins a breeze, and let&rsquo;s face it if you&rsquo;re using a static content generator you&rsquo;re not looking to spend  a lot of time on it. Cryogen was chosen because the ecosystem already had a large number of clojure web projects in it already,  so using lein and the JRE was a big win.</p>") #t (u . "\n<h1 id=\"hello-world\">Hello, world!</h1>\n\n<p>Static content generators have been sort of a fad lately. I&rsquo;ve used them in the past to generate all sorts of  documentation and marketing pages for various jobs. In those days, I&rsquo;d always use <a href=\"https://jekyllrb.com/\">Jekyll</a> or  more recently, <a href=\"http://cryogenweb.org/\">Cryogen</a>. Jekyll always had a huge community behind it which made finding  themes or plugins a breeze, and let&rsquo;s face it if you&rsquo;re using a static content generator you&rsquo;re not looking to spend  a lot of time on it. Cryogen was chosen because the ecosystem already had a large number of clojure web projects in it already,  so using lein and the JRE was a big win.</p>\n<!-- more-->\n\n<p>This time, I&rsquo;ve decided to go with <a href=\"https://github.com/greghendershott/frog\">Frog</a> because I really love lisp and I don&rsquo;t get to  interact with the racket community very often. I seriously considered <a href=\"http://zoggy.github.io/stog/\">Stog</a> because of my equal love  of OCaml, but I just can&rsquo;t stand XML.</p>\n\n<p>So here it is, my blog. Hopefully you&rsquo;ll find it usefull.</p>")) ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-08-02-markdown-to-html-to-pdf-my-resume-s-journey.md" . unix) f post (u . "Markdown to HTML to PDF - My Resume's Journey") (? . 0) 1515963992 (p+ #"/home/ubuntu/subtle-supernova.github.io/blog/2016/08/02/markdown-to-html-to-pdf-my-resume-s-journey/index.html" . unix) (u . "/blog/2016/08/02/markdown-to-html-to-pdf-my-resume-s-journey") (u . "2016-08-02T00:02:31") (? . 1) #f (c (u . "wkhtmltopdf") c (u . "html") c (u . "pdf") c (u . "markdown")) (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>\n\n<h1 id=\"how-my-resume-starts-out-as-markdown\">How my resume starts out as markdown</h1>\n\n<h2 id=\"why-would-you-do-this\">Why would you do this?</h2>\n\n<p>Other than my typical reason of &ldquo;because it&rsquo;s fun?&rdquo; Document formats are really hard. Not only are they hard, but they&rsquo;re one of the few things in computing we haven&rsquo;t managed to simplify. Sure, we&rsquo;ve made them <em>featureful</em> but not <em>simple</em>. Have you ever tried to parse an excel file in a meaningful way? It&rsquo;s not fun.</p>\n\n<p>This brings me to my particular problem: I only want to type my resume once, but I wan&rsquo;t it to be as accessable as possible. I love the idea of typing it in markdown.  I believe markdown to be a sort of mad genius in the same vein as JSON. It only solves about 80% of our problems but it&rsquo;s so easy that it makes it hard to resist.  Another really great thing about this simplicity is that we can hack on the other 20% it doesn&rsquo;t solve without too much effort.</p>\n\n<h2 id=\"how-do-i-do-this\">How do I do this?</h2>\n\n<p>Well, I&rsquo;ve already written about my static content generator. Markdown to HTML isn&rsquo;t exactly exciting. HTML to PDF, however, is barrels of fun.  To accomplish this I use <a href=\"http://wkhtmltopdf.org/\">wkhtmltopdf</a>. It&rsquo;s a wonderful project that leverages webkit and QT. The coolest part of this tool? You can do it all from CLI. This has saved my neck a couple of times, because generating PDFs is a pain, but people <em>love</em> them. On the flip side, generating HTML is a well explored and decently solved problem.  That creates a grand solution for us: generate semi-dynamic HTML, and then have some automated process spit out a PDF using wkhtmltopdf. Since it&rsquo;s all in the CLI, you can do this using a simple  bash script and then leverage arcane things such as the <code>mail</code> command for delivery. I love simple things.</p>\n\n<h2 id=\"whats-next\">What&rsquo;s next?</h2>\n\n<p>For my resume, I&rsquo;d like to do some intermediate processing. While wkhtmltopdf supports pulling from a URL directly (which is pretty sweet) we can also use local files. I&rsquo;ll need to remove some  things like navigation and then add some things like more contact information. I think it&rsquo;d be a really cool project to let someone enter an email address and recieve the processed resume.  Well, I&rsquo;ve beel looking for a reason to dive into the wide and strange world of OCaml webapps. More on that later, perhaps!</p>") #t (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>\n\n<h1 id=\"how-my-resume-starts-out-as-markdown\">How my resume starts out as markdown</h1>\n\n<h2 id=\"why-would-you-do-this\">Why would you do this?</h2>\n\n<p>Other than my typical reason of &ldquo;because it&rsquo;s fun?&rdquo; Document formats are really hard. Not only are they hard, but they&rsquo;re one of the few things in computing we haven&rsquo;t managed to simplify. Sure, we&rsquo;ve made them <em>featureful</em> but not <em>simple</em>. Have you ever tried to parse an excel file in a meaningful way? It&rsquo;s not fun.</p>\n\n<p>This brings me to my particular problem: I only want to type my resume once, but I wan&rsquo;t it to be as accessable as possible. I love the idea of typing it in markdown.  I believe markdown to be a sort of mad genius in the same vein as JSON. It only solves about 80% of our problems but it&rsquo;s so easy that it makes it hard to resist.  Another really great thing about this simplicity is that we can hack on the other 20% it doesn&rsquo;t solve without too much effort.</p>\n\n<h2 id=\"how-do-i-do-this\">How do I do this?</h2>\n\n<p>Well, I&rsquo;ve already written about my static content generator. Markdown to HTML isn&rsquo;t exactly exciting. HTML to PDF, however, is barrels of fun.  To accomplish this I use <a href=\"http://wkhtmltopdf.org/\">wkhtmltopdf</a>. It&rsquo;s a wonderful project that leverages webkit and QT. The coolest part of this tool? You can do it all from CLI. This has saved my neck a couple of times, because generating PDFs is a pain, but people <em>love</em> them. On the flip side, generating HTML is a well explored and decently solved problem.  That creates a grand solution for us: generate semi-dynamic HTML, and then have some automated process spit out a PDF using wkhtmltopdf. Since it&rsquo;s all in the CLI, you can do this using a simple  bash script and then leverage arcane things such as the <code>mail</code> command for delivery. I love simple things.</p>\n\n<h2 id=\"whats-next\">What&rsquo;s next?</h2>\n\n<p>For my resume, I&rsquo;d like to do some intermediate processing. While wkhtmltopdf supports pulling from a URL directly (which is pretty sweet) we can also use local files. I&rsquo;ll need to remove some  things like navigation and then add some things like more contact information. I think it&rsquo;d be a really cool project to let someone enter an email address and recieve the processed resume.  Well, I&rsquo;ve beel looking for a reason to dive into the wide and strange world of OCaml webapps. More on that later, perhaps!</p>\n<!-- more-->"))))