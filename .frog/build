((3) 0 () 3 ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-08-02-markdown-to-html-to-pdf-my-resume-s-journey.md" . unix) (p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-07-20-hello-world.md" . unix) (p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2018-01-14-adventures-in-nim-ffi.md" . unix)) () (h ! (equal) ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-07-20-hello-world.md" . unix) f post (u . "Hello world") (? . 1) 1515963992 (p+ #"/home/ubuntu/subtle-supernova.github.io/blog/2016/07/20/hello-world/index.html" . unix) (u . "/blog/2016/07/20/hello-world") (u . "2016-07-20T20:53:54") #f (? . 0) (c (u . "hello") c (u . "lisp") c (u . "jekyll") c (u . "ocaml") c (u . "crygen") c (u . "clojure") c (u . "stog") c (u . "frog")) (u . "\n<h1 id=\"hello-world\">Hello, world!</h1>\n\n<p>Static content generators have been sort of a fad lately. I&rsquo;ve used them in the past to generate all sorts of  documentation and marketing pages for various jobs. In those days, I&rsquo;d always use <a href=\"https://jekyllrb.com/\">Jekyll</a> or  more recently, <a href=\"http://cryogenweb.org/\">Cryogen</a>. Jekyll always had a huge community behind it which made finding  themes or plugins a breeze, and let&rsquo;s face it if you&rsquo;re using a static content generator you&rsquo;re not looking to spend  a lot of time on it. Cryogen was chosen because the ecosystem already had a large number of clojure web projects in it already,  so using lein and the JRE was a big win.</p>") #t (u . "\n<h1 id=\"hello-world\">Hello, world!</h1>\n\n<p>Static content generators have been sort of a fad lately. I&rsquo;ve used them in the past to generate all sorts of  documentation and marketing pages for various jobs. In those days, I&rsquo;d always use <a href=\"https://jekyllrb.com/\">Jekyll</a> or  more recently, <a href=\"http://cryogenweb.org/\">Cryogen</a>. Jekyll always had a huge community behind it which made finding  themes or plugins a breeze, and let&rsquo;s face it if you&rsquo;re using a static content generator you&rsquo;re not looking to spend  a lot of time on it. Cryogen was chosen because the ecosystem already had a large number of clojure web projects in it already,  so using lein and the JRE was a big win.</p>\n<!-- more-->\n\n<p>This time, I&rsquo;ve decided to go with <a href=\"https://github.com/greghendershott/frog\">Frog</a> because I really love lisp and I don&rsquo;t get to  interact with the racket community very often. I seriously considered <a href=\"http://zoggy.github.io/stog/\">Stog</a> because of my equal love  of OCaml, but I just can&rsquo;t stand XML.</p>\n\n<p>So here it is, my blog. Hopefully you&rsquo;ll find it usefull.</p>")) ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2016-08-02-markdown-to-html-to-pdf-my-resume-s-journey.md" . unix) f post (u . "Markdown to HTML to PDF - My Resume's Journey") (? . 0) 1519264617 (p+ #"/home/ubuntu/subtle-supernova.github.io/blog/2016/08/02/markdown-to-html-to-pdf-my-resume-s-journey/index.html" . unix) (u . "/blog/2016/08/02/markdown-to-html-to-pdf-my-resume-s-journey") (u . "2016-08-02T00:02:31") (? . 1) (? . 2) (c (u . "wkhtmltopdf") c (u . "html") c (u . "pdf") c (u . "markdown")) (u . "\n<h1 id=\"how-my-resume-starts-out-as-markdown\">How my resume starts out as markdown</h1>\n\n<h2 id=\"why-would-you-do-this\">Why would you do this?</h2>\n\n<p>Other than my typical reason of &ldquo;because it&rsquo;s fun?&rdquo; Document formats are really hard. Not only are they hard, but they&rsquo;re one of the few things in computing we haven&rsquo;t managed to simplify. Sure, we&rsquo;ve made them <em>featureful</em> but not <em>simple</em>. Have you ever tried to parse an excel file in a meaningful way? It&rsquo;s not fun.</p>\n\n<p>This brings me to my particular problem: I only want to type my resume once, but I want it to be as accessible as possible. I love the idea of typing it in markdown.  I believe markdown to be a sort of mad genius in the same vein as JSON. It only solves about 80% of our problems but it&rsquo;s so easy that it makes it hard to resist.  Another really great thing about this simplicity is that we can hack on the other 20% it doesn&rsquo;t solve without too much effort.</p>\n\n<h2 id=\"how-do-i-do-this\">How do I do this?</h2>\n\n<p>Well, I&rsquo;ve already written about my static content generator. Markdown to HTML isn&rsquo;t exactly exciting. HTML to PDF, however, is barrels of fun.  To accomplish this I use <a href=\"http://wkhtmltopdf.org/\">wkhtmltopdf</a>. It&rsquo;s a wonderful project that leverages webkit and QT. The coolest part of this tool? You can do it all from CLI. This has saved my neck a couple of times, because generating PDFs is a pain, but people <em>love</em> them. On the flip side, generating HTML is a well explored and decently solved problem.  That creates a grand solution for us: generate semi-dynamic HTML, and then have some automated process spit out a PDF using wkhtmltopdf. Since it&rsquo;s all in the CLI, you can do this using a simple  bash script and then leverage arcane things such as the <code>mail</code> command for delivery. I love simple things.</p>\n\n<h2 id=\"whats-next\">What&rsquo;s next?</h2>\n\n<p>For my resume, I&rsquo;d like to do some intermediate processing. While wkhtmltopdf supports pulling from a URL directly (which is pretty sweet) we can also use local files. I&rsquo;ll need to remove some  things like navigation and then add some things like more contact information. I think it&rsquo;d be a really cool project to let someone enter an email address and receive the processed resume.  Well, I&rsquo;ve beel looking for a reason to dive into the wide and strange world of OCaml webapps. More on that later, perhaps!</p>") #t (u . "\n<h1 id=\"how-my-resume-starts-out-as-markdown\">How my resume starts out as markdown</h1>\n\n<h2 id=\"why-would-you-do-this\">Why would you do this?</h2>\n\n<p>Other than my typical reason of &ldquo;because it&rsquo;s fun?&rdquo; Document formats are really hard. Not only are they hard, but they&rsquo;re one of the few things in computing we haven&rsquo;t managed to simplify. Sure, we&rsquo;ve made them <em>featureful</em> but not <em>simple</em>. Have you ever tried to parse an excel file in a meaningful way? It&rsquo;s not fun.</p>\n\n<p>This brings me to my particular problem: I only want to type my resume once, but I want it to be as accessible as possible. I love the idea of typing it in markdown.  I believe markdown to be a sort of mad genius in the same vein as JSON. It only solves about 80% of our problems but it&rsquo;s so easy that it makes it hard to resist.  Another really great thing about this simplicity is that we can hack on the other 20% it doesn&rsquo;t solve without too much effort.</p>\n\n<h2 id=\"how-do-i-do-this\">How do I do this?</h2>\n\n<p>Well, I&rsquo;ve already written about my static content generator. Markdown to HTML isn&rsquo;t exactly exciting. HTML to PDF, however, is barrels of fun.  To accomplish this I use <a href=\"http://wkhtmltopdf.org/\">wkhtmltopdf</a>. It&rsquo;s a wonderful project that leverages webkit and QT. The coolest part of this tool? You can do it all from CLI. This has saved my neck a couple of times, because generating PDFs is a pain, but people <em>love</em> them. On the flip side, generating HTML is a well explored and decently solved problem.  That creates a grand solution for us: generate semi-dynamic HTML, and then have some automated process spit out a PDF using wkhtmltopdf. Since it&rsquo;s all in the CLI, you can do this using a simple  bash script and then leverage arcane things such as the <code>mail</code> command for delivery. I love simple things.</p>\n\n<h2 id=\"whats-next\">What&rsquo;s next?</h2>\n\n<p>For my resume, I&rsquo;d like to do some intermediate processing. While wkhtmltopdf supports pulling from a URL directly (which is pretty sweet) we can also use local files. I&rsquo;ll need to remove some  things like navigation and then add some things like more contact information. I think it&rsquo;d be a really cool project to let someone enter an email address and receive the processed resume.  Well, I&rsquo;ve beel looking for a reason to dive into the wide and strange world of OCaml webapps. More on that later, perhaps!</p>\n<!-- more-->")) ((p+ #"/home/ubuntu/subtle-supernova.github.io/_src/posts/2018-01-14-adventures-in-nim-ffi.md" . unix) f post (u . "Adventures in NIM FFI") (? . 2) 1519264798 (p+ #"/home/ubuntu/subtle-supernova.github.io/blog/2018/01/14/adventures-in-nim-ffi/index.html" . unix) (u . "/blog/2018/01/14/adventures-in-nim-ffi") (u . "2018-01-14T21:37:34") (? . 0) #f (c (u . "nim") c (u . "c++") c (u . "gRPC") c (u . "protobuf") c (u . "ffi")) (u . "\n<p>I&rsquo;ve recently dipped a toe into the <a href=\"https://nim-lang.org/\">nim</a> programming language. The things that interest me the most are the fact that it compiles to C and FFI with C++. I&rsquo;ve been interested in FFI with C++ lately because <a href=\"https://grpc.io/\">gRPC</a> is pretty wonderful to use but its language support is sort of limited. One language that&rsquo;s really well supported, however, is C++. While not apposed to writing C++, I think if there is an alternative, you should seek it out.</p>\n\n<p>I decided to first experiment with embedding nim into C++ rather than calling C++ from nim. This is definitely the less documented approach, so I would recommend it. But here are some of my findings.</p>") #t (u . "\n<p>I&rsquo;ve recently dipped a toe into the <a href=\"https://nim-lang.org/\">nim</a> programming language. The things that interest me the most are the fact that it compiles to C and FFI with C++. I&rsquo;ve been interested in FFI with C++ lately because <a href=\"https://grpc.io/\">gRPC</a> is pretty wonderful to use but its language support is sort of limited. One language that&rsquo;s really well supported, however, is C++. While not apposed to writing C++, I think if there is an alternative, you should seek it out.</p>\n\n<p>I decided to first experiment with embedding nim into C++ rather than calling C++ from nim. This is definitely the less documented approach, so I would recommend it. But here are some of my findings.</p>\n<!-- more-->\n\n<h3 id=\"the-nim-code\">The nim code</h3>\n\n<div class=\"brush: nim\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">proc </span><span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">cint</span><span class=\"p\">):</span> <span class=\"n\">cint</span> <span class=\"p\">{.</span><span class=\"n\">exportc</span><span class=\"p\">.}</span> <span class=\"o\">=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The nim comes straight from the FFI docs. It&rsquo;s pretty strait forward aside from a couple of notes: - <code>cint</code> is a built in type. No imports. - <code>{. [...] .}</code> is the compiler directive syntax. <code>{. exportc .}</code> means not to mangle the name.</p>\n\n<p>Compiling this gets a little bit tricky.</p>\n\n<div class=\"brush: bash\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span>nim cpp --noMain --noLinking --header:fib.h fib.nim\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>First note that we call <code>nim cpp</code>. I have to admit that I spent some time calling <code>nim c</code> which I thought stood for <code>nim compile</code> as the <code>nim</code> command actually does a lot (like just generating C code instead of a binary, for example). What that actually means is compile <em>with</em> C. When linking to C++ this is obviously not what we want, but the issues that arise don&rsquo;t exaclty point strait to that solution. Next, the <code>--noMain</code> just means we don&rsquo;t want an entry point. The <code>--noLinking</code> means don&rsquo;t call the linker, we&rsquo;ll do that later and lastly <code>--header:fib.h</code> is the name of the header we&rsquo;re generating while <code>fib.nim</code> is our file we want to compile.</p>\n\n<h3 id=\"the-c-code\">The C++ code</h3>\n\n<p>I decided to try and embed nim into the <a href=\"https://github.com/grpc/grpc/tree/master/examples/cpp\">gRPC c++ example</a>.  That didn&rsquo;t actually turn out to matter at all except for making linking tricky, so I&rsquo;ll share my findings here anyway.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">\"fib.h\"</span><span class=\"cp\"></span>\n\n<span class=\"c1\">// ... gRPC example imports ...</span>\n\n<span class=\"c1\">// ... server handler impl ...</span>\n<span class=\"c1\">// ... runServer function ...</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">NimMain</span><span class=\"p\">();</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">f</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">f</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Fib of %d is %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">));</span>\n\n  <span class=\"n\">RunServer</span><span class=\"p\">();</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>So we have to run <code>NimMain();</code> to start us off. We&rsquo;ll get to where this comes from later, but as for what it does is mainly start the garbage collector. After that, we&rsquo;re ready to start calling anything defined in <code>fib.h</code>. There&rsquo;s no more magic here, the rest of it comes from linking so let&rsquo;s  take a look.</p>\n\n<h3 id=\"the-makefileld\">The Makefile/LD</h3>\n\n<p>I&rsquo;ll be the first to admit that I&rsquo;m no Make guru. I use them almost daily, but for very simple tasks, and not usually for compiling c/c++. So here&rsquo;s my gnarly makefile.</p>\n\n<div class=\"brush: Make\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nv\">CXX</span> <span class=\"o\">=</span> clang++\n<span class=\"nv\">CC</span> <span class=\"o\">=</span> clang\n<span class=\"nv\">CPPFLAGS</span> <span class=\"o\">+=</span> <span class=\"sb\">`</span>pkg-config --cflags protobuf grpc<span class=\"sb\">`</span>\n<span class=\"nv\">CFLAGS</span> <span class=\"o\">=</span> -Inimcache -I/usr/local/nim/lib\n<span class=\"nv\">CXXFLAGS</span> <span class=\"o\">+=</span> -Inimcache -I/usr/local/nim/lib -std<span class=\"o\">=</span>c++11\n\n<span class=\"nv\">LDFLAGS</span> <span class=\"o\">+=</span> -L/usr/local/lib <span class=\"sb\">`</span>pkg-config --libs protobuf grpc++ grpc<span class=\"sb\">`</span><span class=\"se\">\\</span>\n                     -Lnimcache<span class=\"se\">\\</span>\n                     -v -lgrpc++_reflection<span class=\"se\">\\</span>\n                     -ldl\n\n<span class=\"nv\">GRPC_CPP_PLUGIN</span> <span class=\"o\">=</span> grpc_cpp_plugin\n<span class=\"nv\">GRPC_CPP_PLUGIN_PATH</span> <span class=\"o\">?=</span> <span class=\"sb\">`</span>which <span class=\"k\">$(</span>GRPC_CPP_PLUGIN<span class=\"k\">)</span><span class=\"sb\">`</span>\n\n<span class=\"nv\">PROTOC</span> <span class=\"o\">=</span> protoc\n<span class=\"nv\">PROTOS_PATH</span> <span class=\"o\">=</span> ./protos\n\n<span class=\"cp\">vpath %.proto $(PROTOS_PATH)</span>\n\n<span class=\"nf\">all</span><span class=\"o\">:</span> <span class=\"n\">greeter_server</span> <span class=\"n\">greeter_client</span>\n\n<span class=\"nf\">greeter_server</span><span class=\"o\">:</span> <span class=\"n\">helloworld</span>.<span class=\"n\">pb</span>.<span class=\"n\">o</span> <span class=\"n\">helloworld</span>.<span class=\"n\">grpc</span>.<span class=\"n\">pb</span>.<span class=\"n\">o</span> <span class=\"n\">greeter_server</span>.<span class=\"n\">o</span> <span class=\"n\">nimcache</span>/*.<span class=\"n\">o</span> \n    <span class=\"k\">$(</span>CXX<span class=\"k\">)</span> <span class=\"k\">$(</span>CXXFLAGS<span class=\"k\">)</span> $^ <span class=\"k\">$(</span>LDFLAGS<span class=\"k\">)</span> -o <span class=\"nv\">$@</span>\n\n<span class=\"nf\">greeter_client</span><span class=\"o\">:</span> <span class=\"n\">helloworld</span>.<span class=\"n\">pb</span>.<span class=\"n\">o</span> <span class=\"n\">helloworld</span>.<span class=\"n\">grpc</span>.<span class=\"n\">pb</span>.<span class=\"n\">o</span> <span class=\"n\">greeter_client</span>.<span class=\"n\">o</span>\n    <span class=\"k\">$(</span>CXX<span class=\"k\">)</span> $^ <span class=\"k\">$(</span>LDFLAGS<span class=\"k\">)</span> -o <span class=\"nv\">$@</span> \n\n<span class=\"nf\">nimcache</span><span class=\"o\">:</span> <span class=\"n\">nimcache</span>/*.<span class=\"n\">c</span>\n    <span class=\"k\">$(</span>CC<span class=\"k\">)</span> <span class=\"k\">$(</span>CFLAGS<span class=\"k\">)</span> -c $^ <span class=\"k\">$(</span>LDFLAGS<span class=\"k\">)</span>\n\n<span class=\"nf\">nim</span><span class=\"o\">:</span>\n    nim cpp --noMain --noLinking --header:fib.h fib.nim\n\n<span class=\"nf\">.PRECIOUS</span><span class=\"o\">:</span> %.<span class=\"n\">grpc</span>.<span class=\"n\">pb</span>.<span class=\"n\">cc</span>\n<span class=\"nf\">%.grpc.pb.cc</span><span class=\"o\">:</span> %.<span class=\"n\">proto</span>\n    <span class=\"k\">$(</span>PROTOC<span class=\"k\">)</span> -I <span class=\"k\">$(</span>PROTOS_PATH<span class=\"k\">)</span> --grpc_out<span class=\"o\">=</span>. --plugin<span class=\"o\">=</span>protoc-gen-grpc<span class=\"o\">=</span><span class=\"k\">$(</span>GRPC_CPP_PLUGIN_PATH<span class=\"k\">)</span> $&lt;\n\n<span class=\"nf\">.PRECIOUS</span><span class=\"o\">:</span> %.<span class=\"n\">pb</span>.<span class=\"n\">cc</span>\n<span class=\"nf\">%.pb.cc</span><span class=\"o\">:</span> %.<span class=\"n\">proto</span>\n    <span class=\"k\">$(</span>PROTOC<span class=\"k\">)</span> -I <span class=\"k\">$(</span>PROTOS_PATH<span class=\"k\">)</span> --cpp_out<span class=\"o\">=</span>. $&lt;\n\n<span class=\"nf\">clean</span><span class=\"o\">:</span>\n    rm -f *.o *.pb.cc *.pb.h greeter_server greeter_client\n    rm -rf nimcache\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>My strategy here was to call <code>make nim</code>, <code>make nimcache</code> and then <code>make</code>.  That made it easy for me to check what was happening between tasks, so I never extended <code>all</code> to include building of nim files.  Most of this is taken from the gRPC C++ example makefile, which handles passing <code>.proto</code> files to <code>protoc</code> really well, so no reason to change that.  There&rsquo;s only a few changes we need to make to the file aside from targets.  The first thing we need to add is <code>nimcache/*.o</code> to <code>greeter_server</code> so that <code>$^</code> picks up the object files placed there by <code>make nimcache</code>.  The final change is extending our flags to make sure the <code>nimcache</code> directory is included and we link to nim.</p>\n\n<p>And viola, running <code>greeter_server</code> both runs the <code>fib()</code> call and starts a gRPC server!</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>This has certainly been a fun adventure. I definitely think nim has a solid place in the world. I&rsquo;m not even sure it&rsquo;s that niche, to be honest. There&rsquo;s a lot of C code out there that can&rsquo;t just be turned into a python module. There&rsquo;s also a lot of python code out there that could stand  to have some performance bound loops put into C. Nim enables all of those things without any C expertise or memory management and not just with python, but any dynamic language. I&rsquo;m also really impressed with the tooling given how young the language is. Editor support has been pretty great and the <code>nimble</code> package manager is well on its way to getting the job done.</p>"))))